<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
		
	<!-- 扫描注解 -->
	<context:component-scan base-package="com.qjz.declarePlatform"></context:component-scan>	
		
	<!-- spring配置文件，分3步 -->
	<!-- 第一步，配置数据源 -->
	<!-- 加载jdbc.properties文件中的内容，jdbc.properties文件中key命名要有一定的特殊规则 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>	
	
	<!-- 第二步，创建sqlSessionFactory工厂，生产sqlSession（用于数据库交互操作） -->
	<!-- ref: 注入dataSource，把datasource交给sqlSessionFactory工厂管理 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 自动扫描mappers.xml文件 -->
		<property name="mapperLocations" value="classpath:mappers/*.xml"></property>
		<!-- 加载mybatis全局配置文件 -->
		<property name="configLocation" value="classpath:spring-mybatis.xml"></property>
	</bean>
	<!-- 配置mybatis接口代理开发
		* 接口类名和映射文件必须同名
		* 接口类和映射文件必须在同一个目录下
		* 映射文件的namespace名字必须是接口的全限定类名
		* 接口的方法名必须和映射Statement的id一致
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.qjz.declarePlatform.dao"></property>
		<!-- 默认不需要配置SqlSessionFactory(只有一个SqlSessionFactory时)，单独配置也可以 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<!-- 第三步，事务
		  配置事务管理器
   		  对mybatis操作数据库进行事务控制，spring使用jdbc的事务控制类
	 -->
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 管理数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!-- 配置通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 拦截方法 -->
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- aop切面编程 -->
	<!-- 配置拦截service层 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.qjz.declarePlatform.service.*.*(..))"/>
	</aop:config>
	
</beans>